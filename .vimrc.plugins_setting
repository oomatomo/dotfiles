"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" YankRing.vim
"------------------------------------

" Yankの履歴参照
"nmap ,y ;YRShow<CR>

"------------------------------------
" Align
"------------------------------------

" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3

"------------------------------------
" neocomplete.vim
" neocomplcache.vim
"------------------------------------

"" neocomplcache
NeoBundle 'Shougo/neocomplcache'
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

"------------------------------------
" neosnippet
"------------------------------------

" Plugin key-mappings.
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/snippets'

"------------------------------------
" NERD_commenter.vim
"------------------------------------

" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

" ------------------------------------
" surround.vim
"------------------------------------

" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" Fugitive.vim
"------------------------------------

nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>

"------------------------------------
" NERDTreeToggle
"------------------------------------

nmap <silent> nd :NERDTreeToggle<Enter>

"------------------------------------
" taglist.vim
"------------------------------------

nmap <silent> tl :TlistToggle<Enter>
let Tlist_Use_Right_Window = 1  " 右側でtaglistのウィンドーを表示
let Tlist_Exit_OnlyWindow = 1   " taglistのウィンドーが最後のウィンドーならばVimを閉じる
let Tlist_Auto_Open = 1         " 自動表示
let Tlist_Auto_Update = 1       " 自動更新

"------------------------------------
" quickRun
"------------------------------------

" nmap <silent> qr :QuickRun -outputter/buffer/close_on_empty 1<Enter>
nmap <silent> qr :QuickRun -hook/time/enable 1<Enter>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

"------------------------------------
" Syntastic
"------------------------------------

let g:syntastic_enable_signs = 1          " エラー行をsignで表示する
let g:syntastic_enable_highlighting = 1   " 可能ならhighligt表示する
"let g:syntastic_auto_loc_list=1           " 自動的に開いたり閉じたりする
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_quiet_messages = 0

"------------------------------------
" vim-indent-guides
"------------------------------------

nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level =2
let g:indent_guides_guide_size = 1
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=green ctermbg=13
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=6
if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
endif

"------------------------------------
" unite.vim
"------------------------------------

" The prefix key.
nnoremap [unite]  <Nop>
nmap <Space>f [unite]

nnoremap [unite]u  :<C-u>Unite <Space>

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir file<CR>
" snippet一覧
nnoremap <silent> [unite]s  :<C-u>Unite snippet<CR>
" color一覧
nnoremap <silent> [unite]c  :<C-u>Unite colorscheme<CR>

" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" ウィンドウを分割して開く
au Filetype unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('splist')
au Filetype unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

" ウィンドウを縦に分割して開く
au Filetype unite nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
au Filetype unite inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')

" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

let g:unite_source_file_mru_limit = 200

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>

"------------------------------------
"vim Unite-grep
"------------------------------------

let g:unite_enable_start_insert = 1

" 大文字小文字を区別しない
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" grep検索
nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語をgrep検索
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R>

" grep検索結果の再呼出
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

" unite grep に ag(The Silver Searcher) を使う
"if executable('ag')
"  let g:unite_source_grep_command = 'ag'
"  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
"  let g:unite_source_grep_recursive_opt = ''
"endif

"------------------------------------
"ctrip vim
"------------------------------------

let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("t")': ['<c-a>'],
    \ }

"------------------------------------
" vim-gitgutter
"------------------------------------

" gitの差分
nnoremap <silent> <space>g :<C-u>GitGutterToggle<CR>
nnoremap <silent> <space>h :<C-u>GitGutterLineHighlightsToggle<CR>

" 遅延呼び出し
let s:bundle = neobundle#get('vim-gitgutter')
function! s:bundle.hooks.on_source(bundle)
    let g:gitgutter_enabled         = 0
    let g:gitgutter_highlight_lines = 0
endfunction
unlet s:bundle

"------------------------------------
" vim-over
"------------------------------------

" 置換
" nnoremap <silent> <Leader>m :OverCommandLine<CR>
" nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>

"------------------------------------
" vim-quickhl
"------------------------------------

nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>n <Plug>(quickhl-manual-reset)
xmap <Space>n <Plug>(quickhl-manual-reset)

"------------------------------------
" ColorSchema{{{{
"------------------------------------

nnoremap <silent>cn : <C-u>call ColorRoller.roll()<CR>
nnoremap <silent>cb : <C-u>call ColorRoller.unroll()<CR>

let ColorRoller = {}
let ColorRoller.colors = [
            \'default',
            \'desert256',
            \'mrkn256',
            \'molokai',
            \'yuroyoro256',
            \'solarized',
            \'mustang',
            \'jellybeans',
            \'Tomorrow',
            \ ]

function! ColorRoller.change()
    let color = get(self.colors, 0)
    silent exe "colorscheme " . color
    redraw
    echo self.colors
endfunction

function! ColorRoller.roll()
    let item = remove(self.colors, 0)
    call insert(self.colors, item, len(self.colors))
    call self.change()
endfunction

function! ColorRoller.unroll()
    let item = remove(self.colors, -1)
    call insert(self.colors, item, 0)
    call self.change()
endfunction

"------------------------------------
"lightline
"------------------------------------
set laststatus=2

" let g:lightline = {
      " \ 'colorscheme': 'jellybeans',
      " \ }

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ],
      \              [ 'syntastic' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'syntastic': 'SyntasticStatuslineFlag'
      \ },
      \ 'component_type': {
      \   'syntastic': 'error'
      \ }
      \ }

" ブランチをステータスラインに表示する
function! MyFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != expand('%:F') ? expand('%:F') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

"------------------------------------
"accelerated-jk
"------------------------------------
let g:accelerated_jk_acceleration_table = [10,5,3]
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
